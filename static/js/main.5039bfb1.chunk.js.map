{"version":3,"sources":["App.styles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContainer","styled","div","ControlsContainer","TopButtonsContainer","SliderContainer","RangeContainer","RangeInput","input","Sequence","h2","visible","$isVisible","getVisibility","InnerContainer","AnswerContainer","isCorrect","disabled","getBorder","TimeLeft","RevealButton","Button","isVisible","isRevealed","App","useState","memoryTime","setMemoryTime","sequence","setSequence","sequenceLength","setSequenceLength","range","setRange","timeLeft","setTimeLeft","isSequenceVisible","setSequenceVisible","isAnswerVisible","setAnswerVisible","gameStarted","setGameStarted","answer","setAnswer","isAnswerDisabled","setAnswerDisabled","speakSequence","setSpeakSequence","displaySequence","setDisplaySequence","utteranceSpeed","setUtteranceSpeed","useEffect","interval","setInterval","clearInterval","checkCorrectedness","index","toString","variant","color","onClick","Slider","value","aria-labelledby","step","min","max","valueLabelDisplay","onChange","_","Typography","id","gutterBottom","type","event","target","newSequence","i","push","Math","floor","random","parseInt","Array","fill","voices","window","speechSynthesis","getVoices","utterance","SpeechSynthesisUtterance","join","rate","voice","find","lang","onend","speak","map","newAnswer","handleAnswer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5039bfb1.chunk.js","sourcesContent":["import { Button } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\ninterface GenericProps {\n  $isVisible: boolean;\n}\n\ninterface AnswerProps {\n  $isVisible: boolean;\n  isCorrect: boolean;\n  disabled: boolean;\n}\n\nexport const AppContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #001529;\n`;\n\nexport const ControlsContainer = styled.div`\n  margin: 1em 0;\n  width: 100%;\n  max-width: 22em;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const TopButtonsContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n  margin-bottom: 1em;\n`;\n\nexport const SliderContainer = styled.div`\n  margin: 0 0 1em 0;\n`;\n\nexport const RangeContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const RangeInput = styled.input`\n  width: 2.5em;\n  margin: 0.5em;\n  font-size: large;\n`;\n\nexport const Sequence = styled.h2<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nexport const InnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  padding: 2em;\n`;\n\nexport const AnswerContainer = styled.input<AnswerProps>`\n  height: 2em;\n  width: 2em;\n  margin: 1em;\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n  border: ${({ isCorrect, disabled }) => getBorder(isCorrect, disabled)};\n  box-sizing: border-box;\n  font-size: large;\n\n  &:disabled {\n    color: white;\n  }\n\n  &::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nexport const TimeLeft = styled.h2<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nexport const RevealButton = styled(Button)<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nconst getVisibility = (isVisible: boolean): string =>\n  isVisible ? \"visible\" : \"hidden\";\n\nconst getBorder = (isCorrect: boolean, isRevealed: boolean): string => {\n  if (!isRevealed) return \"none\";\n  return isCorrect ? \"2px solid green\" : \"2px solid red\";\n};\n","import { Button, Slider, Typography } from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport {\n  AnswerContainer,\n  AppContainer,\n  ControlsContainer,\n  InnerContainer,\n  RangeContainer,\n  RangeInput,\n  RevealButton,\n  Sequence,\n  SliderContainer,\n  TimeLeft,\n  TopButtonsContainer,\n} from \"./App.styles\";\n\nfunction App() {\n  const [memoryTime, setMemoryTime] = useState(5);\n  const [sequence, setSequence] = useState<number[]>([0]);\n  const [sequenceLength, setSequenceLength] = useState(6);\n  const [range, setRange] = useState(\"9\");\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [isSequenceVisible, setSequenceVisible] = useState(false);\n  const [isAnswerVisible, setAnswerVisible] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [answer, setAnswer] = useState<(string | null)[]>([]);\n  const [isAnswerDisabled, setAnswerDisabled] = useState(false);\n  const [speakSequence, setSpeakSequence] = useState(false);\n  const [displaySequence, setDisplaySequence] = useState(true);\n  const [utteranceSpeed, setUtteranceSpeed] = useState(1);\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (gameStarted) {\n        setSequenceVisible(false);\n        setAnswerVisible(true);\n      }\n      return;\n    }\n\n    const interval = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timeLeft, sequence, gameStarted]);\n\n  const generateSequence = () => {\n    const newSequence: number[] = [];\n    for (let i = 1; i <= sequenceLength; i++) {\n      newSequence.push(Math.floor(Math.random() * parseInt(range)));\n    }\n\n    setAnswer(new Array(sequenceLength).fill(\"\"));\n    setSequence(newSequence);\n    setTimeLeft(memoryTime);\n    setSequenceVisible(displaySequence ? true : false);\n    setAnswerVisible(false);\n    setGameStarted(true);\n    setAnswerDisabled(false);\n\n    if (speakSequence) {\n      const voices = window.speechSynthesis.getVoices();\n      const utterance = new SpeechSynthesisUtterance(newSequence.join(\", \"));\n      utterance.rate = utteranceSpeed;\n      utterance.voice =\n        voices.find((voice) => voice.lang === \"en-US\") || voices[0];\n      utterance.onend = () => {\n        if (!displaySequence) {\n          setAnswerVisible(true);\n        }\n      };\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  const handleAnswer = (index: number, value: string) => {\n    const newAnswer = [...answer];\n    newAnswer[index] = value;\n    setAnswer(newAnswer);\n  };\n\n  const checkCorrectedness = (index: number): boolean =>\n    sequence[index]?.toString() === answer[index];\n\n  const renderAnswerInputs = () => {\n    return (\n      <div>\n        {answer.map((_, index) => (\n          <AnswerContainer\n            key={index}\n            value={answer[index] as string}\n            disabled={isAnswerDisabled}\n            $isVisible={isAnswerVisible}\n            type=\"number\"\n            onChange={(event) => handleAnswer(index, event.target.value)}\n            isCorrect={checkCorrectedness(index)}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const revealAnswer = () => {\n    setSequenceVisible(true);\n    setAnswerDisabled(true);\n  };\n\n  return (\n    <AppContainer>\n      <InnerContainer>\n        <h1>SEQUENCE MEMORY v.2</h1>\n\n        <ControlsContainer>\n          <TopButtonsContainer>\n            <Button\n              variant={displaySequence ? \"contained\" : \"outlined\"}\n              color=\"primary\"\n              onClick={() => setDisplaySequence(!displaySequence)}\n            >\n              Display\n            </Button>\n            <Button\n              variant={speakSequence ? \"contained\" : \"outlined\"}\n              color=\"secondary\"\n              onClick={() => setSpeakSequence(!speakSequence)}\n            >\n              Speak\n            </Button>\n          </TopButtonsContainer>\n\n          <SliderContainer>\n            <Slider\n              value={sequenceLength}\n              aria-labelledby=\"length-selector\"\n              step={1}\n              min={1}\n              max={14}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setSequenceLength(value as number)}\n            />\n            <Typography id=\"length-selector\" gutterBottom>\n              Sequence Length: {sequenceLength} numbers\n            </Typography>\n          </SliderContainer>\n\n          <SliderContainer>\n            <Slider\n              value={memoryTime}\n              aria-labelledby=\"time-selector\"\n              step={5}\n              min={5}\n              max={60}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setMemoryTime(value as number)}\n            />\n            <Typography id=\"time-selector\" gutterBottom>\n              Memorisation Time: {memoryTime} secs\n            </Typography>\n          </SliderContainer>\n\n          <SliderContainer>\n            <Slider\n              value={utteranceSpeed}\n              aria-labelledby=\"speed-selector\"\n              step={0.1}\n              min={0.1}\n              max={3}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setUtteranceSpeed(value as number)}\n            />\n            <Typography id=\"speed-selector\" gutterBottom>\n              Voice speed: {utteranceSpeed}\n            </Typography>\n          </SliderContainer>\n\n          <RangeContainer>\n            <span>Numbers range: 0 to </span>\n            <RangeInput\n              type=\"number\"\n              value={range}\n              onChange={(event) => setRange(event.target.value)}\n            />\n          </RangeContainer>\n        </ControlsContainer>\n\n        <Button\n          variant=\"contained\"\n          onClick={generateSequence}\n          disabled={!speakSequence && !displaySequence}\n        >\n          Generate Sequence\n        </Button>\n\n        <Sequence $isVisible={isSequenceVisible}>\n          {sequence.join(\" - \")}\n        </Sequence>\n\n        {renderAnswerInputs()}\n\n        <TimeLeft $isVisible={displaySequence}>\n          Time remaining: {timeLeft}\n        </TimeLeft>\n\n        <RevealButton\n          variant=\"contained\"\n          onClick={revealAnswer}\n          $isVisible={true}\n        >\n          Reveal Answer\n        </RevealButton>\n      </InnerContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}