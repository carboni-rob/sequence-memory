{"version":3,"sources":["App.styles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContainer","styled","div","AppTitle","ControlsCard","Paper","ControlsContainer","TopButtonsContainer","SliderContainer","RowContainer","RangeInput","input","Sequence","h2","visible","$isVisible","getVisibility","SequenceContainer","AnswerContainer","isCorrect","disabled","getBorder","TimeLeft","RevealButton","Button","StatsCard","isVisible","isRevealed","App","useState","memoryTime","setMemoryTime","sequence","setSequence","sequenceLength","setSequenceLength","range","setRange","timeLeft","setTimeLeft","isSequenceVisible","setSequenceVisible","isAnswerVisible","setAnswerVisible","gameStarted","setGameStarted","answers","setAnswers","isAnswerDisabled","setAnswerDisabled","speakSequence","setSpeakSequence","displaySequence","setDisplaySequence","utteranceSpeed","setUtteranceSpeed","backwards","setBackwards","correctAnswers","setCorrectAnswers","isRevealDisabled","setRevealDisabled","stats","setStats","drawerOpen","setDrawerOpen","useEffect","savedStats","localStorage","getItem","usageStats","JSON","parse","interval","setInterval","clearInterval","checkCorrectedness","index","reverse","toString","saveStats","value","setItem","stringify","correctCount","length","map","run","correct","reduce","acc","totalCount","total","totalAnswers","percentage","toFixed","AppBar","position","Toolbar","IconButton","title","edge","color","aria-label","onClick","Typography","variant","Slider","aria-labelledby","step","min","max","valueLabelDisplay","onChange","_","id","gutterBottom","type","event","target","FormControlLabel","checked","control","Switch","label","labelPlacement","size","startIcon","newSequence","i","push","Math","floor","random","parseInt","Array","fill","voices","window","speechSynthesis","getVoices","utterance","SpeechSynthesisUtterance","join","rate","voice","find","lang","onend","speak","newAnswer","handleAnswer","correctArray","answerArray","answer","filter","countCorrectAnswers","SwipeableDrawer","anchor","open","onOpen","onClose","confirm","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.44c62dc5.chunk.js","sourcesContent":["import { Button, Paper } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\ninterface GenericProps {\n  $isVisible: boolean;\n}\n\ninterface AnswerProps {\n  $isVisible: boolean;\n  isCorrect: boolean;\n  disabled: boolean;\n}\n\nexport const AppContainer = styled.div`\n  width: 100%;\n  height: 90vh;\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  background-color: #afb0b1;\n`;\n\nexport const AppTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n`;\n\nexport const ControlsCard = styled(Paper)`\n  padding: 1em;\n  margin-top: 3em;\n  height: 100%;\n  display: flex;\n  flex: 1;\n  flex-direction: column;\n  justify-content: space-between;\n`;\n\nexport const ControlsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n`;\n\nexport const TopButtonsContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n  margin-bottom: 1em;\n`;\n\nexport const SliderContainer = styled.div`\n  margin: 0 0 1em 0;\n`;\n\nexport const RowContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 1em;\n`;\n\nexport const RangeInput = styled.input`\n  width: 2.5em;\n  margin: 0.5em;\n  font-size: large;\n`;\n\nexport const Sequence = styled.h2<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nexport const SequenceContainer = styled.div`\n  display: flex;\n  flex: 3;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n`;\n\nexport const AnswerContainer = styled.input<AnswerProps>`\n  height: 2em;\n  width: 2em;\n  margin: 1em;\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n  border: ${({ isCorrect, disabled }) => getBorder(isCorrect, disabled)};\n  box-sizing: border-box;\n  font-size: large;\n\n  &:disabled {\n    color: white;\n  }\n\n  &::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nexport const TimeLeft = styled.h2<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nexport const RevealButton = styled(Button)<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nexport const StatsCard = styled(Paper)`\n  padding: 1em;\n  margin: 1em;\n`;\n\nconst getVisibility = (isVisible: boolean): string =>\n  isVisible ? \"visible\" : \"hidden\";\n\nconst getBorder = (isCorrect: boolean, isRevealed: boolean): string => {\n  if (!isRevealed) return \"none\";\n  return isCorrect ? \"2px solid green\" : \"2px solid red\";\n};\n","import {\n  AppBar,\n  Button,\n  FormControlLabel,\n  IconButton,\n  Slider,\n  SwipeableDrawer,\n  Switch,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\nimport { useEffect, useState } from \"react\";\nimport {\n  AnswerContainer,\n  AppContainer,\n  ControlsContainer,\n  SequenceContainer,\n  RowContainer,\n  RangeInput,\n  RevealButton,\n  Sequence,\n  SliderContainer,\n  TimeLeft,\n  TopButtonsContainer,\n  AppTitle,\n  StatsCard,\n  ControlsCard,\n} from \"./App.styles\";\n\ninterface Run {\n  total: number;\n  correct: number;\n}\n\nfunction App() {\n  const [memoryTime, setMemoryTime] = useState(5);\n  const [sequence, setSequence] = useState<number[]>([0]);\n  const [sequenceLength, setSequenceLength] = useState(6);\n  const [range, setRange] = useState(\"9\");\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [isSequenceVisible, setSequenceVisible] = useState(false);\n  const [isAnswerVisible, setAnswerVisible] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [answers, setAnswers] = useState<(string | null)[]>([]);\n  const [isAnswerDisabled, setAnswerDisabled] = useState(false);\n  const [speakSequence, setSpeakSequence] = useState(false);\n  const [displaySequence, setDisplaySequence] = useState(true);\n  const [utteranceSpeed, setUtteranceSpeed] = useState(1);\n  const [backwards, setBackwards] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [isRevealDisabled, setRevealDisabled] = useState(true);\n  const [stats, setStats] = useState<Run[]>([]);\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  useEffect(() => {\n    const savedStats = localStorage.getItem(\"stats\");\n    const usageStats: Run[] = savedStats ? JSON.parse(savedStats) : [];\n    setStats(usageStats);\n  }, []);\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (gameStarted) {\n        setSequenceVisible(false);\n        setAnswerVisible(true);\n        setRevealDisabled(false);\n      }\n      return;\n    }\n\n    const interval = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timeLeft, sequence, gameStarted]);\n\n  const generateSequence = () => {\n    const newSequence: number[] = [];\n    for (let i = 1; i <= sequenceLength; i++) {\n      newSequence.push(Math.floor(Math.random() * parseInt(range)));\n    }\n\n    setAnswers(new Array(sequenceLength).fill(\"\"));\n    setSequence(newSequence);\n    setTimeLeft(memoryTime);\n    setSequenceVisible(displaySequence ? true : false);\n    setAnswerVisible(false);\n    setGameStarted(true);\n    setAnswerDisabled(false);\n    setCorrectAnswers(0);\n\n    if (speakSequence) {\n      const voices = window.speechSynthesis.getVoices();\n      const utterance = new SpeechSynthesisUtterance(newSequence.join(\", \"));\n      utterance.rate = utteranceSpeed;\n      utterance.voice =\n        voices.find((voice) => voice.lang === \"en-US\") || voices[0];\n      utterance.onend = () => {\n        if (!displaySequence) {\n          setAnswerVisible(true);\n          setRevealDisabled(false);\n        }\n      };\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  const handleAnswer = (index: number, value: string) => {\n    const newAnswer = [...answers];\n    newAnswer[index] = value;\n    setAnswers(newAnswer);\n  };\n\n  const countCorrectAnswers = () => {\n    const correctArray = backwards ? [...sequence].reverse() : sequence;\n    const answerArray = answers.map((answer) => parseInt(answer as string));\n    const correctAnswersArray = answerArray.length\n      ? answerArray.filter((answer, index) => correctArray[index] === answer)\n      : [];\n\n    return correctAnswersArray.length;\n  };\n\n  const checkCorrectedness = (index: number): boolean => {\n    const correctArray = backwards ? [...sequence].reverse() : sequence;\n\n    return correctArray[index]?.toString() === answers[index];\n  };\n\n  const renderAnswerInputs = () => {\n    return (\n      <div>\n        {answers.map((_, index) => (\n          <AnswerContainer\n            key={index}\n            value={answers[index] as string}\n            disabled={isAnswerDisabled}\n            $isVisible={isAnswerVisible}\n            type=\"number\"\n            onChange={(event) => handleAnswer(index, event.target.value)}\n            isCorrect={checkCorrectedness(index)}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const saveStats = (value: Run[]) => {\n    localStorage.setItem(\"stats\", JSON.stringify(value));\n  };\n\n  const revealAnswer = () => {\n    setRevealDisabled(true);\n    setSequenceVisible(true);\n    setAnswerDisabled(true);\n    const correctAnswers = countCorrectAnswers();\n    setCorrectAnswers(correctAnswers);\n\n    stats.push({\n      total: sequence.length,\n      correct: correctAnswers,\n    });\n\n    saveStats(stats);\n  };\n\n  const resetStats = () => {\n    const conf = window.confirm(\n      \"Do you really want to reset your usage statistics?\"\n    );\n    if (conf) {\n      setStats([]);\n      saveStats([]);\n    }\n  };\n\n  const isBackwardsSwitchDisabled = (): boolean => {\n    if (!gameStarted) return false;\n    return timeLeft !== 0 || !isAnswerDisabled;\n  };\n\n  const correctCount = stats.length\n    ? stats\n        .map((run) => run.correct)\n        .reduce((acc: number, correctAnswers: number) => acc + correctAnswers)\n    : 0;\n\n  const totalCount = stats.length\n    ? stats\n        .map((run) => run.total)\n        .reduce((acc: number, totalAnswers: number) => acc + totalAnswers)\n    : 0;\n\n  const percentage = totalCount\n    ? ((correctCount * 100) / totalCount).toFixed(2)\n    : 0;\n\n  return (\n    <AppContainer>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton\n            title=\"Usage Stats\"\n            edge=\"start\"\n            color=\"inherit\"\n            aria-label=\"menu\"\n            onClick={() => setDrawerOpen(true)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <AppTitle>\n            <Typography variant=\"h4\">SEQUENCE MEMORY v.2</Typography>\n          </AppTitle>\n        </Toolbar>\n      </AppBar>\n\n      <ControlsCard>\n        <ControlsContainer>\n          <RowContainer>\n            <Typography variant=\"h5\">Controls</Typography>\n          </RowContainer>\n          <TopButtonsContainer>\n            <Button\n              variant={displaySequence ? \"contained\" : \"outlined\"}\n              color=\"primary\"\n              onClick={() => setDisplaySequence(!displaySequence)}\n            >\n              Display\n            </Button>\n            <Button\n              variant={speakSequence ? \"contained\" : \"outlined\"}\n              color=\"secondary\"\n              onClick={() => setSpeakSequence(!speakSequence)}\n            >\n              Speak\n            </Button>\n          </TopButtonsContainer>\n\n          <SliderContainer>\n            <Slider\n              value={sequenceLength}\n              aria-labelledby=\"length-selector\"\n              step={1}\n              min={1}\n              max={14}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setSequenceLength(value as number)}\n            />\n            <Typography id=\"length-selector\" gutterBottom>\n              Sequence Length: {sequenceLength} numbers\n            </Typography>\n          </SliderContainer>\n\n          <SliderContainer>\n            <Slider\n              value={memoryTime}\n              aria-labelledby=\"time-selector\"\n              step={5}\n              min={5}\n              max={60}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setMemoryTime(value as number)}\n            />\n            <Typography id=\"time-selector\" gutterBottom>\n              Memorisation Time: {memoryTime} secs\n            </Typography>\n          </SliderContainer>\n\n          <SliderContainer>\n            <Slider\n              value={utteranceSpeed}\n              aria-labelledby=\"speed-selector\"\n              step={0.1}\n              min={0.1}\n              max={3}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setUtteranceSpeed(value as number)}\n            />\n            <Typography id=\"speed-selector\" gutterBottom>\n              Voice speed: {utteranceSpeed}\n            </Typography>\n          </SliderContainer>\n\n          <RowContainer>\n            <span>Numbers range: 0 to </span>\n            <RangeInput\n              type=\"number\"\n              value={range}\n              onChange={(event) => setRange(event.target.value)}\n            />\n          </RowContainer>\n\n          <RowContainer>\n            <FormControlLabel\n              value={backwards}\n              onChange={(_, checked) => setBackwards(checked)}\n              disabled={isBackwardsSwitchDisabled()}\n              control={<Switch color=\"secondary\" />}\n              label=\"Answer backwards\"\n              labelPlacement=\"start\"\n            />\n          </RowContainer>\n        </ControlsContainer>\n\n        <RowContainer onClick={() => setDrawerOpen(true)}>\n          <Button size=\"large\" startIcon={<AssessmentIcon />}>\n            Usage Stats\n          </Button>\n        </RowContainer>\n      </ControlsCard>\n\n      <SequenceContainer>\n        <Button\n          variant=\"contained\"\n          onClick={generateSequence}\n          disabled={!speakSequence && !displaySequence}\n        >\n          Generate Sequence\n        </Button>\n\n        <Sequence $isVisible={isSequenceVisible}>\n          {sequence.join(\" - \")}\n        </Sequence>\n\n        {renderAnswerInputs()}\n\n        <TimeLeft $isVisible={displaySequence}>\n          Time remaining: {timeLeft}\n        </TimeLeft>\n\n        <RevealButton\n          variant=\"contained\"\n          onClick={revealAnswer}\n          $isVisible={true}\n          disabled={isRevealDisabled}\n        >\n          Reveal Answer\n        </RevealButton>\n        <h2>\n          ({correctAnswers} out of {sequence.length})\n        </h2>\n      </SequenceContainer>\n\n      <SwipeableDrawer\n        anchor=\"left\"\n        open={drawerOpen}\n        onOpen={() => setDrawerOpen(true)}\n        onClose={() => setDrawerOpen(false)}\n      >\n        <StatsCard>\n          <RowContainer>\n            <AssessmentIcon />\n            <Typography variant=\"h5\"> Usage Stats:</Typography>\n          </RowContainer>\n          <RowContainer>\n            <Typography variant=\"h6\">\n              You answered correctly {correctCount} times out of {totalCount} in{\" \"}\n              {stats.length} runs ({percentage}%)\n            </Typography>\n          </RowContainer>\n          <RowContainer>\n            <Button variant=\"contained\" onClick={resetStats}>\n              Reset\n            </Button>\n          </RowContainer>\n        </StatsCard>\n      </SwipeableDrawer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}