{"version":3,"sources":["App.styles.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["AppContainer","styled","div","AppToolbar","Toolbar","ControlsContainer","TopButtonsContainer","SliderContainer","RowContainer","RangeInput","input","Sequence","h2","visible","$isVisible","getVisibility","InnerContainer","AnswerContainer","isCorrect","disabled","getBorder","TimeLeft","RevealButton","Button","isVisible","isRevealed","App","useState","memoryTime","setMemoryTime","sequence","setSequence","sequenceLength","setSequenceLength","range","setRange","timeLeft","setTimeLeft","isSequenceVisible","setSequenceVisible","isAnswerVisible","setAnswerVisible","gameStarted","setGameStarted","answers","setAnswers","isAnswerDisabled","setAnswerDisabled","speakSequence","setSpeakSequence","displaySequence","setDisplaySequence","utteranceSpeed","setUtteranceSpeed","backwards","setBackwards","correctAnswers","setCorrectAnswers","isRevealDisabled","setRevealDisabled","stats","setStats","useEffect","savedStats","localStorage","getItem","usageStats","JSON","parse","interval","setInterval","clearInterval","checkCorrectedness","index","reverse","toString","saveStats","value","setItem","stringify","correctCount","length","map","run","correct","reduce","acc","totalCount","total","totalAnswers","percentage","toFixed","AppBar","position","Typography","variant","onClick","window","confirm","color","Slider","aria-labelledby","step","min","max","valueLabelDisplay","onChange","_","id","gutterBottom","type","event","target","FormControlLabel","checked","control","Switch","label","labelPlacement","newSequence","i","push","Math","floor","random","parseInt","Array","fill","voices","speechSynthesis","getVoices","utterance","SpeechSynthesisUtterance","join","rate","voice","find","lang","onend","speak","newAnswer","handleAnswer","correctArray","answerArray","answer","filter","countCorrectAnswers","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f497b9f.chunk.js","sourcesContent":["import { Button, Toolbar } from \"@material-ui/core\";\nimport styled from \"styled-components\";\n\ninterface GenericProps {\n  $isVisible: boolean;\n}\n\ninterface AnswerProps {\n  $isVisible: boolean;\n  isCorrect: boolean;\n  disabled: boolean;\n}\n\nexport const AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-color: #afb0b1;\n  margin-top: 2em;\n`;\n\nexport const AppToolbar = styled(Toolbar)`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\n\nexport const ControlsContainer = styled.div`\n  margin: 1em 0;\n  width: 100%;\n  max-width: 22em;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const TopButtonsContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: space-evenly;\n  margin-bottom: 1em;\n`;\n\nexport const SliderContainer = styled.div`\n  margin: 0 0 1em 0;\n`;\n\nexport const RowContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const RangeInput = styled.input`\n  width: 2.5em;\n  margin: 0.5em;\n  font-size: large;\n`;\n\nexport const Sequence = styled.h2<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nexport const InnerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  padding: 2em;\n`;\n\nexport const AnswerContainer = styled.input<AnswerProps>`\n  height: 2em;\n  width: 2em;\n  margin: 1em;\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n  border: ${({ isCorrect, disabled }) => getBorder(isCorrect, disabled)};\n  box-sizing: border-box;\n  font-size: large;\n\n  &:disabled {\n    color: white;\n  }\n\n  &::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n    margin: 0;\n  }\n`;\n\nexport const TimeLeft = styled.h2<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nexport const RevealButton = styled(Button)<GenericProps>`\n  visibility: ${({ $isVisible: visible }) => getVisibility(visible)};\n`;\n\nconst getVisibility = (isVisible: boolean): string =>\n  isVisible ? \"visible\" : \"hidden\";\n\nconst getBorder = (isCorrect: boolean, isRevealed: boolean): string => {\n  if (!isRevealed) return \"none\";\n  return isCorrect ? \"2px solid green\" : \"2px solid red\";\n};\n","import {\n  AppBar,\n  Button,\n  FormControlLabel,\n  Slider,\n  Switch,\n  Typography,\n} from \"@material-ui/core\";\nimport { useEffect, useState } from \"react\";\nimport {\n  AnswerContainer,\n  AppContainer,\n  ControlsContainer,\n  InnerContainer,\n  RowContainer,\n  RangeInput,\n  RevealButton,\n  Sequence,\n  SliderContainer,\n  TimeLeft,\n  TopButtonsContainer,\n  AppToolbar,\n} from \"./App.styles\";\n\ninterface Run {\n  total: number;\n  correct: number;\n}\n\nfunction App() {\n  const [memoryTime, setMemoryTime] = useState(5);\n  const [sequence, setSequence] = useState<number[]>([0]);\n  const [sequenceLength, setSequenceLength] = useState(6);\n  const [range, setRange] = useState(\"9\");\n  const [timeLeft, setTimeLeft] = useState(0);\n  const [isSequenceVisible, setSequenceVisible] = useState(false);\n  const [isAnswerVisible, setAnswerVisible] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [answers, setAnswers] = useState<(string | null)[]>([]);\n  const [isAnswerDisabled, setAnswerDisabled] = useState(false);\n  const [speakSequence, setSpeakSequence] = useState(false);\n  const [displaySequence, setDisplaySequence] = useState(true);\n  const [utteranceSpeed, setUtteranceSpeed] = useState(1);\n  const [backwards, setBackwards] = useState(false);\n  const [correctAnswers, setCorrectAnswers] = useState(0);\n  const [isRevealDisabled, setRevealDisabled] = useState(true);\n  const [stats, setStats] = useState<Run[]>([]);\n\n  useEffect(() => {\n    const savedStats = localStorage.getItem(\"stats\");\n    const usageStats: Run[] = savedStats ? JSON.parse(savedStats) : [];\n    setStats(usageStats);\n  }, []);\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (gameStarted) {\n        setSequenceVisible(false);\n        setAnswerVisible(true);\n        setRevealDisabled(false);\n      }\n      return;\n    }\n\n    const interval = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n    return () => clearInterval(interval);\n  }, [timeLeft, sequence, gameStarted]);\n\n  const generateSequence = () => {\n    const newSequence: number[] = [];\n    for (let i = 1; i <= sequenceLength; i++) {\n      newSequence.push(Math.floor(Math.random() * parseInt(range)));\n    }\n\n    setAnswers(new Array(sequenceLength).fill(\"\"));\n    setSequence(newSequence);\n    setTimeLeft(memoryTime);\n    setSequenceVisible(displaySequence ? true : false);\n    setAnswerVisible(false);\n    setGameStarted(true);\n    setAnswerDisabled(false);\n    setCorrectAnswers(0);\n\n    if (speakSequence) {\n      const voices = window.speechSynthesis.getVoices();\n      const utterance = new SpeechSynthesisUtterance(newSequence.join(\", \"));\n      utterance.rate = utteranceSpeed;\n      utterance.voice =\n        voices.find((voice) => voice.lang === \"en-US\") || voices[0];\n      utterance.onend = () => {\n        if (!displaySequence) {\n          setAnswerVisible(true);\n          setRevealDisabled(false);\n        }\n      };\n      speechSynthesis.speak(utterance);\n    }\n  };\n\n  const handleAnswer = (index: number, value: string) => {\n    const newAnswer = [...answers];\n    newAnswer[index] = value;\n    setAnswers(newAnswer);\n  };\n\n  const countCorrectAnswers = () => {\n    const correctArray = backwards ? [...sequence].reverse() : sequence;\n    const answerArray = answers.map((answer) => parseInt(answer as string));\n    const correctAnswersArray = answerArray.length\n      ? answerArray.filter((answer, index) => correctArray[index] === answer)\n      : [];\n\n    return correctAnswersArray.length;\n  };\n\n  const checkCorrectedness = (index: number): boolean => {\n    const correctArray = backwards ? [...sequence].reverse() : sequence;\n\n    return correctArray[index]?.toString() === answers[index];\n  };\n\n  const renderAnswerInputs = () => {\n    return (\n      <div>\n        {answers.map((_, index) => (\n          <AnswerContainer\n            key={index}\n            value={answers[index] as string}\n            disabled={isAnswerDisabled}\n            $isVisible={isAnswerVisible}\n            type=\"number\"\n            onChange={(event) => handleAnswer(index, event.target.value)}\n            isCorrect={checkCorrectedness(index)}\n          />\n        ))}\n      </div>\n    );\n  };\n\n  const saveStats = (value: Run[]) => {\n    localStorage.setItem(\"stats\", JSON.stringify(value));\n  };\n\n  const revealAnswer = () => {\n    setRevealDisabled(true);\n    setSequenceVisible(true);\n    setAnswerDisabled(true);\n    const correctAnswers = countCorrectAnswers();\n    setCorrectAnswers(correctAnswers);\n\n    stats.push({\n      total: sequence.length,\n      correct: correctAnswers,\n    });\n\n    saveStats(stats);\n  };\n\n  const resetStats = () => {\n    const conf = window.confirm(\n      \"Do you really want to reset your usage statistics?\"\n    );\n    if (conf) {\n      setStats([]);\n      saveStats([]);\n    }\n  };\n\n  const isBackwardsSwitchDisabled = (): boolean => {\n    if (!gameStarted) return false;\n    return timeLeft !== 0 || !isAnswerDisabled;\n  };\n\n  const correctCount = stats.length\n    ? stats\n        .map((run) => run.correct)\n        .reduce((acc: number, correctAnswers: number) => acc + correctAnswers)\n    : 0;\n\n  const totalCount = stats.length\n    ? stats\n        .map((run) => run.total)\n        .reduce((acc: number, totalAnswers: number) => acc + totalAnswers)\n    : 0;\n\n  const percentage = totalCount\n    ? ((correctCount * 100) / totalCount).toFixed(2)\n    : 0;\n\n  return (\n    <AppContainer>\n      <AppBar position=\"fixed\">\n        <AppToolbar>\n          <Typography variant=\"h4\">SEQUENCE MEMORY v.2</Typography>\n          <Typography variant=\"h6\">\n            You have answered correctly {correctCount} times out of {totalCount}{\" \"}\n            in {stats.length} runs ({percentage}%)\n          </Typography>\n          <Button variant=\"contained\" onClick={resetStats}>\n            Reset\n          </Button>\n        </AppToolbar>\n      </AppBar>\n\n      <InnerContainer>\n        <ControlsContainer>\n          <TopButtonsContainer>\n            <Button\n              variant={displaySequence ? \"contained\" : \"outlined\"}\n              color=\"primary\"\n              onClick={() => setDisplaySequence(!displaySequence)}\n            >\n              Display\n            </Button>\n            <Button\n              variant={speakSequence ? \"contained\" : \"outlined\"}\n              color=\"secondary\"\n              onClick={() => setSpeakSequence(!speakSequence)}\n            >\n              Speak\n            </Button>\n          </TopButtonsContainer>\n\n          <SliderContainer>\n            <Slider\n              value={sequenceLength}\n              aria-labelledby=\"length-selector\"\n              step={1}\n              min={1}\n              max={14}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setSequenceLength(value as number)}\n            />\n            <Typography id=\"length-selector\" gutterBottom>\n              Sequence Length: {sequenceLength} numbers\n            </Typography>\n          </SliderContainer>\n\n          <SliderContainer>\n            <Slider\n              value={memoryTime}\n              aria-labelledby=\"time-selector\"\n              step={5}\n              min={5}\n              max={60}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setMemoryTime(value as number)}\n            />\n            <Typography id=\"time-selector\" gutterBottom>\n              Memorisation Time: {memoryTime} secs\n            </Typography>\n          </SliderContainer>\n\n          <SliderContainer>\n            <Slider\n              value={utteranceSpeed}\n              aria-labelledby=\"speed-selector\"\n              step={0.1}\n              min={0.1}\n              max={3}\n              valueLabelDisplay=\"auto\"\n              onChange={(_, value) => setUtteranceSpeed(value as number)}\n            />\n            <Typography id=\"speed-selector\" gutterBottom>\n              Voice speed: {utteranceSpeed}\n            </Typography>\n          </SliderContainer>\n\n          <RowContainer>\n            <span>Numbers range: 0 to </span>\n            <RangeInput\n              type=\"number\"\n              value={range}\n              onChange={(event) => setRange(event.target.value)}\n            />\n          </RowContainer>\n\n          <RowContainer>\n            <FormControlLabel\n              value={backwards}\n              onChange={(_, checked) => setBackwards(checked)}\n              disabled={isBackwardsSwitchDisabled()}\n              control={<Switch color=\"secondary\" />}\n              label=\"Answer backwards\"\n              labelPlacement=\"start\"\n            />\n          </RowContainer>\n        </ControlsContainer>\n\n        <Button\n          variant=\"contained\"\n          onClick={generateSequence}\n          disabled={!speakSequence && !displaySequence}\n        >\n          Generate Sequence\n        </Button>\n\n        <Sequence $isVisible={isSequenceVisible}>\n          {sequence.join(\" - \")}\n        </Sequence>\n\n        {renderAnswerInputs()}\n\n        <TimeLeft $isVisible={displaySequence}>\n          Time remaining: {timeLeft}\n        </TimeLeft>\n\n        <RevealButton\n          variant=\"contained\"\n          onClick={revealAnswer}\n          $isVisible={true}\n          disabled={isRevealDisabled}\n        >\n          Reveal Answer\n        </RevealButton>\n        <h2>\n          ({correctAnswers} out of {sequence.length})\n        </h2>\n      </InnerContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}